image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

stages:
  - lint
  - security
  - test
  - sonarqube
  - build
  - deploy

lint:
  tags:
    - default
  stage: lint
  image: python:3.9.14
  before_script:
    - ls
    - pwd
  script:
    - echo "This job lints the app"
    - pip install -r requirements/dev.txt
    - black alpha/*

security:
  tags:
    - default
  stage: security
  image: ubuntu:20.04
  script:
    - apt-get update -y
    - apt-get install wget apt-transport-https gnupg lsb-release -y
    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | tee /usr/share/keyrings/trivy.gpg > /dev/null
    - echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list
    - apt-get update -y
    - apt-get install trivy -y
    - trivy -v
    - trivy fs . > report.trivy
  artifacts:
    paths:
      - report.trivy

test:
  tags:
    - default
  stage: test
  image: python:3.9.14
  before_script:
    - ls
    - pwd
  script:
    - echo "This job tests something"
    - pip install -r requirements/dev.txt
    - pytest

sonarqube:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  tags:
    - default
  stage: sonarqube
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main # or the name of your main branch

build:
  tags:
    - default
  stage: build
  before_script:
    - docker info
    - apk add aws-cli
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/m6e5t9t2
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - docker build -t registry.gitlab.com/modern-devops/alpha .
    - docker tag registry.gitlab.com/modern-devops/alpha public.ecr.aws/m6e5t9t2/cchostak-modern-devops/alpha:latest
    - docker push public.ecr.aws/m6e5t9t2/cchostak-modern-devops/alpha:latest

deploy:
  tags:
    - default
  stage: deploy
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
